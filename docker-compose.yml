version: '3.8'

services:

 # mongodb database

 database:
  image: mongo:latest
  container_name: mongo-container
  #env_file: ./dev.env
  enviornment:
   - MONGO_INITDB_DATABASE: housify
   - MONGO_INITDB_ROOT_USERNAME: root
   - MONGO_INITDB_ROOT_PASSWORD: pass
   - MONGODB_DATA_DIR: /data/db
   - MONDODB_LOG_DIR: /dev/null
  ports:
   - 27017:27017
  volumes:
   - mongodbdata:/data/db
   # - mongodb_config:/data/configdb
  networks:
   - backend

 # React frontend

 frontend:
  container_name: frontend
  build: 
   context: frontend

 # Flask backend

 backend:
  container_name: backend
  build:
   context: backend  # backend folder
   dockerfile: Dockerfile
  image: python:3.10.5-slim-buster  # python image
  restart: unless-stopped  # stops when you stop the container
  enviornment:  # env variables
   APP_ENV: "Production"
   APP_DEBUG: "False"
   APP_PORT: 5000
   MONGODB_DATABASE: housify
   MONGODB_HOSTNAME: mongodb
  volumes:
   - appdata:/var/www  # appdata volume
  depends_on:
   - database
  networks:
   - frontend
   - backend

 # webserver

 webserver:
  build:
   context: nginx
   dockerfile: Dockerfile
  image: nginx:latest
  container_name: webserver
  restart: unless-stopped
  environment:
   APP_ENV: "Production"
   APP_NAME: "Housify"
   APP_DEBUG: "false"
   SERVICE_NAME: "webserver"
  ports:
   - "80:80"
   - "443:443"
  volumes:
   - nginxdata:/var/log/nginx
   - ./nginx.conf:/etc/nginx/conf.d/default.conf
  depends_on:
   - flask
  networks:
   - frontend

# service done

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge

volumes:
  mongodbdata:
    driver: local
  appdata:
    driver: local
  nginxdata:
    driver: local
 
 #  docker-compose -f docker-compose.dev.yml up --build
